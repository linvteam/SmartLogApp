{"ast":null,"code":"import { HttpEventType, HttpResponse } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/file-upload.service\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = function (a0) {\n  return {\n    width: a0\n  };\n};\nfunction FileUploadComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"div\", 12);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(3, _c0, ctx_r0.progress + \"%\"));\n    i0.ɵɵattribute(\"aria-valuenow\", ctx_r0.progress);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.progress, \"% \");\n  }\n}\nfunction FileUploadComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.message);\n  }\n}\nfunction FileUploadComponent_li_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 14)(1, \"a\", 15);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const file_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"href\", file_r3.url, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(file_r3.name);\n  }\n}\nexport class FileUploadComponent {\n  constructor(uploadService) {\n    this.uploadService = uploadService;\n    this.progress = 0;\n    this.message = '';\n  }\n  selectFile(event) {\n    this.selectedFiles = event.target.files;\n    console.log(\"Selezionato un file\");\n  }\n  upload() {\n    this.progress = 0;\n    if (this.selectedFiles) {\n      const file = this.selectedFiles.item(0);\n      if (file) {\n        this.currentFile = file;\n        console.log(this.currentFile.type);\n        this.uploadService.upload(this.currentFile).subscribe({\n          next: event => {\n            if (event.type === HttpEventType.UploadProgress) {\n              this.progress = Math.round(100 * event.loaded / event.total);\n            } else if (event instanceof HttpResponse) {\n              this.message = event.body.message;\n              this.fileInfos = this.uploadService.getFiles();\n            }\n          },\n          error: err => {\n            console.log(err);\n            this.progress = 0;\n            if (err.error && err.error.message) {\n              this.message = err.error.message;\n            } else {\n              this.message = 'Could not upload the file!';\n            }\n            this.currentFile = undefined;\n          }\n        });\n      }\n      this.selectedFiles = undefined;\n    }\n  }\n  ngOnInit() {\n    this.fileInfos = this.uploadService.getFiles();\n  }\n}\nFileUploadComponent.ɵfac = function FileUploadComponent_Factory(t) {\n  return new (t || FileUploadComponent)(i0.ɵɵdirectiveInject(i1.FileUploadService));\n};\nFileUploadComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FileUploadComponent,\n  selectors: [[\"app-file-upload\"]],\n  decls: 13,\n  vars: 5,\n  consts: [[1, \"row\"], [1, \"col-4\"], [1, \"btn\", \"btn-success\", \"btn-sm\", 3, \"onSubmit\"], [\"type\", \"file\", 3, \"change\"], [\"type\", \"submit\", \"value\", \"invia\"], [\"class\", \"progress my-3\", 4, \"ngIf\"], [\"class\", \"alert alert-secondary\", \"role\", \"alert\", 4, \"ngIf\"], [1, \"card\", \"mt-3\"], [1, \"card-header\"], [1, \"list-group\", \"list-group-flush\"], [\"class\", \"list-group-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"progress\", \"my-3\"], [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"progress-bar\", \"progress-bar-info\", \"progress-bar-striped\", 3, \"ngStyle\"], [\"role\", \"alert\", 1, \"alert\", \"alert-secondary\"], [1, \"list-group-item\"], [3, \"href\"]],\n  template: function FileUploadComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"form\", 2);\n      i0.ɵɵlistener(\"onSubmit\", function FileUploadComponent_Template_form_onSubmit_2_listener() {\n        return ctx.upload();\n      });\n      i0.ɵɵelementStart(3, \"input\", 3);\n      i0.ɵɵlistener(\"change\", function FileUploadComponent_Template_input_change_3_listener($event) {\n        return ctx.selectFile($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 4);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtemplate(5, FileUploadComponent_div_5_Template, 3, 5, \"div\", 5);\n      i0.ɵɵtemplate(6, FileUploadComponent_div_6_Template, 2, 1, \"div\", 6);\n      i0.ɵɵelementStart(7, \"div\", 7)(8, \"div\", 8);\n      i0.ɵɵtext(9, \"List of Files\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"ul\", 9);\n      i0.ɵɵtemplate(11, FileUploadComponent_li_11_Template, 3, 2, \"li\", 10);\n      i0.ɵɵpipe(12, \"async\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.currentFile);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.message);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(12, 3, ctx.fileInfos));\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i2.NgStyle, i2.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["HttpEventType","HttpResponse","i0","FileUploadComponent","constructor","uploadService","selectFile","event","selectedFiles","target","files","console","log","upload","progress","file","item","currentFile","type","subscribe","next","UploadProgress","Math","round","loaded","total","message","body","fileInfos","getFiles","error","err","undefined","ngOnInit","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/matteo/Scrivania/angular-15-file-upload/src/app/components/file-upload/file-upload.component.ts","/home/matteo/Scrivania/angular-15-file-upload/src/app/components/file-upload/file-upload.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpEventType, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { FileUploadService } from 'src/app/services/file-upload.service';\n\n\n@Component({\n  selector: 'app-file-upload',\n  templateUrl: './file-upload.component.html',\n  styleUrls: ['./file-upload.component.css']\n})\nexport class FileUploadComponent implements OnInit {\n\n  selectedFiles?: FileList;\n  currentFile?: File;\n  progress = 0;\n  message = '';\n\n  fileInfos?: Observable<any>;\n\n  constructor(private uploadService: FileUploadService) { }\n\n  selectFile(event: any): void {\n    this.selectedFiles = event.target.files;\n    console.log(\"Selezionato un file\");\n  }\n\n  upload(): void {\n    this.progress = 0;\n\n    if (this.selectedFiles) {\n      const file: File | null = this.selectedFiles.item(0);\n\n      if (file) {\n        this.currentFile = file;\n        console.log(this.currentFile.type);\n\n        this.uploadService.upload(this.currentFile).subscribe({\n          next: (event: any) => {\n            if (event.type === HttpEventType.UploadProgress) {\n              this.progress = Math.round(100 * event.loaded / event.total);\n            } else if (event instanceof HttpResponse) {\n              this.message = event.body.message;\n              this.fileInfos = this.uploadService.getFiles();\n            }\n          },\n          error: (err: any) => {\n            console.log(err);\n            this.progress = 0;\n\n            if (err.error && err.error.message) {\n              this.message = err.error.message;\n            } else {\n              this.message = 'Could not upload the file!';\n            }\n\n            this.currentFile = undefined;\n          }\n        });\n      }\n\n      this.selectedFiles = undefined;\n    }\n  \n  }\n\n  ngOnInit(): void {\n    this.fileInfos = this.uploadService.getFiles();\n  }\n  \n}\n","<div class=\"row\">\n     \n    <div class=\"col-4\">\n      <form class=\"btn btn-success btn-sm\" (onSubmit)=\"upload()\">\n        <input type=\"file\" (change)=\"selectFile($event)\" />\n        <input type=\"submit\" value=\"invia\" />\n      </form>\n    </div>\n  </div>\n  \n  <div *ngIf=\"currentFile\" class=\"progress my-3\">\n    <div\n      class=\"progress-bar progress-bar-info progress-bar-striped\"\n      role=\"progressbar\"\n      attr.aria-valuenow=\"{{ progress }}\"\n      aria-valuemin=\"0\"\n      aria-valuemax=\"100\"\n      [ngStyle]=\"{ width: progress + '%' }\"\n    >\n      {{ progress }}%\n    </div>\n  </div>\n  \n  <div *ngIf=\"message\" class=\"alert alert-secondary\" role=\"alert\">{{ message }}</div>\n  \n  <div class=\"card mt-3\">\n    <div class=\"card-header\">List of Files</div>\n    <ul class=\"list-group list-group-flush\">\n      <li *ngFor=\"let file of fileInfos | async\" class=\"list-group-item\">\n        <a href=\"{{ file.url }}\">{{ file.name }}</a>\n      </li>\n    </ul>\n  </div>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}